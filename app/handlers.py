from aiogram.filters.command import Command

import asyncio

from app.state import stop_event
from validators import validate
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from youtube_service import get_video_info, format_duration, download_audio, download_video
import app.keyboards as kb
from pathlib import Path
from aiogram.exceptions import TelegramAPIError
from yt_dlp.utils import DownloadError, ExtractorError

router = Router()

# START COMMAND
@router.message(Command('start'))
async def start_command(message: Message):
    await message.answer_photo(photo='AgACAgIAAxkBAAPOaNBE_ycvlmoqmZePb-gd4qoOEKUAAp75MRvCIoBKBCGsGuhK11UBAAMCAAN5AAM2BA', caption="""üëã –ü—Ä–∏–≤–µ—Ç!  
–Ø ‚Äî —Ç–≤–æ–π YouTube Downloader Bot.  

–ß—Ç–æ —è —É–º–µ—é:  
üé¨ –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ 720p –∏ 1080p  
üéß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –≤ MP3  
üì∏ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–∏–∫–∞   

–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É —Å YouTube ‚Äî –∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. üöÄ
""")

# STOP COMMAND
@router.message(Command('stop'))
async def stop_command(message: Message):
    await message.answer("–£–¥–∞—á–∏ üëã")
    stop_event.set()


@router.message(F.text)
async def handle_text(message: Message):
    video_id, error = validate(message.text)
    if error == "NO_URL":
        await message.answer("–ù–µ –≤–∏–∂—É —Å—Å—ã–ª–∫–∏. –ü—Ä–∏—à–ª–∏ –º–Ω–µ URL –Ω–∞ YouTube.")
    elif error == "NO_VIDEO_ID":
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ video_id. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://www.youtube.com/watch?v=...")
    elif error == "UNSUPPORTED_HOST":
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞ YouTube. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ youtube.com –∏ youtu.be.")
    try:
        info = get_video_info(video_id)
        caption = f"–ù–∞—à—ë–ª –≤–∏–¥–µ–æ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {info['title']}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(info.get('duration'))}"

        await message.answer_photo(photo=info["thumbnail"], caption=caption, reply_markup=kb.build_download_kb(video_id))



    except (ValueError, KeyError, OSError):
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")

@router.callback_query(F.data.startswith("dl:"))
async def handle_download(callback: CallbackQuery):
    await callback.answer()

    parts = callback.data.split(":")
    action = parts[1] if len(parts) > 1 else None
    quality = parts[2] if action == "video" and len(parts) > 3 or (action == "video" and len(parts) > 2) else (parts[2] if action == "video" and len(parts) > 2 else None)
    video_id = parts[-1] if len(parts) >= 3 else None
    file_path = None

    try:
        if action == "audio":
            await callback.message.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
            try:
                file_path = await asyncio.to_thread(download_audio, video_id)
            except (DownloadError, ExtractorError):
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–∑–∂–µ.")
                return
            except Exception:
                await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ.")
                return

            await callback.message.answer_audio(FSInputFile(file_path))
            return

        elif action == "video":
            if quality is None:
                await callback.message.answer("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ.")
                return
            try:
                q = int(quality)
                if q not in (720, 1080):
                    await callback.message.answer("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é 720p –∏ 1080p.")
                    return
            except ValueError:
                await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞.")
                return

            await callback.message.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª‚Ä¶ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
            try:
                file_path = await asyncio.to_thread(download_video, video_id, q)
            except (DownloadError, ExtractorError):
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ.")
                return
            except Exception:
                await callback.message.answer("–°–±–æ–π –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.")
                return

            try:
                await callback.message.answer_video(FSInputFile(file_path))
            except TelegramAPIError:
                await callback.message.answer_document(FSInputFile(file_path))
            return

        else:
            await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
            return

    finally:
        if file_path:
            Path(file_path).unlink(missing_ok=True)