import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from validators import validate
from aiogram import F
from youtube_service import get_video_info

logging.basicConfig(level=logging.INFO)
bot = Bot(token='7505097627:AAFdThZ86zhmi3WTk3YOToDYLhiROD4n74k')
dp = Dispatcher()

# START COMMAND
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Å YouTube.')

# STOP COMMAND
@dp.message(Command('stop'))
async def stop_command(message: types.Message):
    await message.answer("–£–¥–∞—á–∏ üëã")
    await dp.stop_polling()

@dp.message(F.text)
async def handle_text(message: types.Message):
    video_id, error = validate(message.text)
    if error == "NO_URL":
        await message.answer("–ù–µ –≤–∏–∂—É —Å—Å—ã–ª–∫–∏. –ü—Ä–∏—à–ª–∏ –º–Ω–µ URL –Ω–∞ YouTube.")
    elif error == "NO_VIDEO_ID":
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ video_id. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://www.youtube.com/watch?v=...")
    elif error == "UNSUPPORTED_HOST":
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞ YouTube. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ youtube.com –∏ youtu.be.")
    try:
        info = get_video_info(video_id)
        dur = info.get("duration") or 0
        mm = dur // 60
        ss = dur % 60
        caption = f"–ù–∞—à—ë–ª –≤–∏–¥–µ–æ:\n{info.get('title')}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {mm:02d}:{ss:02d}"

        await message.answer(caption)

    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
